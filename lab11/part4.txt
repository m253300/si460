1. The ambigious point problem with marching squares is when you have a square such that one set of opposite corners are greater than the threshold, and the other set of opposing corners are less then the threshold (shown below). This results in ambiguity because there are two resulting connections which could be made.

Threshold = 3

| 1     6 |         | a     b |
|         |  >>>>>  |         |
| 5     2 |         | c     d |

2. In order to resolve this ambiguity, the marching squares algorithm implemented could just always use either case 5 or case 10. But that is more just ignoring the ambiguity. Another way it could actually be resolved is by using the output of the interpolation. I believe that by comparing the interpolation values computed from ab and bd, and ac and cd, would somehow tell if they needed to be connected in a different way. Because at a certain point, the lines created by high enough values would eventually intersect, switching the case from 5 to 10, or vice versa. 

Another way to do it is by googling it and reading the very first article which computes something called a Q value. That was discovered here: https://www.boristhebrave.com/2022/01/03/resolving-ambiguities-in-marching-squares/. I think that this Q value is somewhat similar to what I thought of on my own but much more concise and actually works.

3. I already implemented the naive ambiguity resolution which I first mentioned by simply always doing case 10 (the one where ab connects to bd, and dc connects to ca (in that order)). That was implemented by "marching" the square clockwise such that I never consider the case 5 solution. Therefore, refer to any of my part 1-3 solutions for this aombiguity solution.